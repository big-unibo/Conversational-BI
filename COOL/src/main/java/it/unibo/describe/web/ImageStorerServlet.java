package it.unibo.describe.web;

import java.io.File;
import java.io.FileOutputStream;
import java.util.Base64;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.json.JSONObject;

/**
 * Servlet interface to store charts generated by describe.
 */
@WebServlet("/ImageStorer")
public class ImageStorerServlet extends HttpServlet {
  private static final long serialVersionUID = 1L;

  /**
   * Given a sentence returns the string representing the parsing tree.
   * 
   * @param request
   *          request
   * @param response
   *          response
   * @throws ServletException
   *           in case of error
   * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
   */
  protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException {
    response.addHeader("Access-Control-Allow-Origin", "*");
    response.addHeader("Access-Control-Allow-Methods", "GET, POST, PATCH, PUT, DELETE, OPTIONS");
    response.addHeader("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept, X-Auth-Token");
    response.setCharacterEncoding("UTF-8");
    try {
      String base64 = request.getParameter("base64");
      int index = base64.indexOf(',');
      if (index != -1) base64 = base64.substring(index + 1);
      byte[] bytes = Base64.getDecoder().decode(new String(base64).getBytes("UTF-8"));
      System.out.println(getServletContext().getRealPath("WEB-INF/classes/"));
      final FileOutputStream fos = new FileOutputStream(getServletContext().getRealPath("WEB-INF/classes/") + File.separator + "imagestorer.png");
      fos.write(bytes);
      fos.close();
      response.getOutputStream().print(new JSONObject().toString());
    } catch (final Exception e) {
      e.printStackTrace();
    }
  }

  /**
   * Given a sentence returns the string representing the parsing tree.
   * 
   * @param request
   *          request
   * @param response
   *          response
   * @throws ServletException
   *           in case of error
   */
  @Override
  protected void doPost(final HttpServletRequest request, final HttpServletResponse response) throws ServletException {
    doGet(request, response);
  }
}
